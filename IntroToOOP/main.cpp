#include<iostream>
using namespace std;
using std::cout;


class Point
{
	double x;
	double y;
	//Создавая структуру или класс мы создаем новый тип данных.
	// Класс - это тип данных!!!		//Структура - это тип данных!!!
public:
	double get_x()const
	{
		return x;
	}
	double get_y()const
	{
		return y;
	}
	void set_x(double x)
	{
		this->x = x;
	}
	void set_y(double y)
	{
		this->y = y;
	}

	//				Constructors:
	/*Point()
	{
		x = y = 0;
		cout << "DeffaultConstructor:\t" << this << endl;
	}
	Point(int x)
	{
		this->x = x;
		this->y = 0;
		cout << "Constructor:\t\t" << this << endl;
	}*/
	Point(double x=0, double y=0)
	{
		this->x = x;
		this->y = y;
		cout << "Constructor:\t\t" << this << endl;
	}
	~Point()
	{
		cout << "Destructor:\t\t" << this << endl;
	}

	//				Methods:
	void print()const
	{
		cout << "\tX = " << get_x() << "\tY = " << get_y() << endl;
	}
};

//#define STRUCT_POINT
//#define OBJECT_LIFETIME
void main()
{
	setlocale(LC_ALL, "");
#ifdef STRUCT_POINT


	int a;			//Обьявление переменной 'a' типа 'int'
	Point A;		//Обьявление переменной 'A' типа 'Point'
	A.x = 2;
	A.y = 3;
	cout << A.x << "\t" << A.y << endl;

	Point* pA = &A;
	cout << pA->x << "\t" << pA->y << endl;	
#endif STRUCT_POINT
	Point A;		//Здесь неявно вызывается
	//A.set_x(6);
	//A.set_y(7);
	//cout << A.get_x() << "\t" << A.get_y() << endl;
	A.print();

	Point B = 5;
	//cout << B.get_x() << "\t" << B.get_y() << endl;
	B.print();

	Point C(7, 8);
	C.print();

#ifdef OBJECT_LIFETIME
	for (int i = 0; i < 10; i++)
	{
		cout << i << "\t";
	}
	cout << endl;
#endif // OBJECT_LIFETIME
}

/*
-------------------------------------------------------------------------------
.  - Оператор прямого доступа (Point operator)
	 Используется для получения доступа к полям обьекта по имени обьекта;
-> - Оператор косвенного доступа (Arrow operator)
	 Используется для получения доступа к полям обьекта по адресу обьекта;

-------------------------------------------------------------------------------
Модификаторы доступа:
	private:	закрытые поля, доступные только внутри класса;
	public:		открытые поля, доступные в любом месте программы;
	protected:	защищенные поля, доступные внутри класса, и его дочерних классов;
-------------------------------------------------------------------------------
Единственное различие между структурами и классами:
у структуры все поля умолчанию открыты, а у класса закрыты
-------------------------------------------------------------------------------
Переменные в обязательном порядке должны находиться в private-секции класса.
Переменная в public это грубейшее нарушение в инкапсуляции
-------------------------------------------------------------------------------
get/set-методы:
get (взять, получить) - открывают доступ к переменным членам класса на чтение,
						т.е., позволяют получить значения закрытых переменных;
set (задать, установить) - открывают доступ к закрытым пременным членам класса
							на запись, т.е., позволяют задавать значения закрытых
							переменных;
get-методы обязательно должны быть константными.
-------------------------------------------------------------------------------
-------------------------------------------------------------------------------
*/
/*
-------------------------------------------------------------------------------
							КОНСТРУКТОРЫ
Constructor - это метод, который создает обьект.
	- По умолчанию - это конструктор, который может быть вызван без параментров;
	Это может быть констурктор не принимающий никаких параметров, или конструктор,
	каждый параметр которого... 
	Если в классе не написать ни одного конструктора, то компилятор добавит неявный
	конструктор по умолчанию. Потому что без конструктора не возможно создать обьект,
	такой неявный конструктор по умолчанию выделяет память под обьект и инициализирует
	поля обьекта мусором. Неявный конструктор по умолчанию сразу же удаляется из класса,
	если программист напишет хотя бы один конструктор.
	Конструктор по умолчанию обычно пишут чтобы при создании обьекта по умолчанию проинициализировать
	его поля значениями по умолчанию, а не мусором.
	-С параметрами;
	- Конструктор копирования;
	-Конструктор переноса;
~Destructor	- это метод, который уничтожает обьект по завершениии его времени жизни;
Оператор присваивания(AssignmentOperator;
-------------------------------------------------------------------------------

-------------------------------------------------------------------------------
*/